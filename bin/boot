#!/usr/bin/env bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT="${ETCD_PORT:-4001}"
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH="${ETCD_PATH:-/hehe/services/phppgadmin}"
export ETCD_DISCOVERY_PATH="${ETCD_DISCOVERY_PATH:-/deis/services/phppgadmin}"
export ETCD_TTL="${ETCD_TTL:-20}"

# wait for etcd to be available
until etcdctl --no-sync -C "$ETCD" ls >/dev/null 2>&1; do
  echo "phppgadmin: waiting for etcd at $ETCD..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $((ETCD_TTL+1))


# wait for confd to run once and install initial templates
until confd -onetime -node "$ETCD" -confdir /app --log-level error; do
  echo "phppgadmin: waiting for confd to write initial templates..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done

# spawn confd in the background to update services based on etcd changes
confd -node "$ETCD" -confdir /app --log-level error --interval 5 &

# publish the service to etcd using the injected HOST and EXTERNAL_PORT
if [[ ! -z $EXTERNAL_PORT ]]; then
  # configure service discovery
  set +e
  etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/host" "$HOST" >/dev/null
  etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/port" "$EXTERNAL_PORT" >/dev/null
  etcdctl --no-sync -C "$ETCD" set "$ETCD_DISCOVERY_PATH/phppgadmin_v2.cmd.1" "${HOST}:${EXTERNAL_PORT}" --ttl "$ETCD_TTL" >/dev/null
  set -e
fi

# run the service
php -S 0.0.0.0:8000 -t /app/http \
  -d upload_max_filesize=$PHP_UPLOAD_MAX_FILESIZE \
  -d post_max_size=$PHP_UPLOAD_MAX_FILESIZE \
  -d max_input_vars=$PHP_MAX_INPUT_VARS &

SERVICE_PID=$!

set +e

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
  echo "Will kill SERVICE_PID:$SERVICE_PID..."
  kill -TERM $SERVICE_PID
  echo "Wait SERVICE_PID:$SERVICE_PID quit..."
  wait $SERVICE_PID 2>/dev/null
  exit 0
}
trap on_exit INT TERM

wait
